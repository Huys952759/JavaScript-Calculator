{"version":3,"sources":["App.js","components/Numbers.js","components/Operators.js","components/Equals.js","components/Decimal.js","components/AC.js","components/Output.js","components/Smile.js","serviceWorker.js","index.js"],"names":["App","props","state","expression","formula","allowDecimal","handleClick","bind","handleNumber","handleDecimal","handleOperator","handleEqual","handleClear","e","target","className","this","textContent","setState","test","currOperator","replace","slice","result","eval","id","Component","numbers","number","Numbers","Number","map","numberObj","i","key","onClick","operators","operator","Operators","operatorObj","Equals","Decimal","AC","Output","Smile","class","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6fb5722.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Numbers from './components/Numbers';\nimport Operators from './components/Operators';\nimport Equals from './components/Equals';\nimport Decimal from './components/Decimal';\nimport AC from './components/AC';\nimport Output from './components/Output';\nimport Smile from './components/Smile'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expression: '0',\n      formula: '',\n      allowDecimal: true,\n      \n    }\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNumber = this.handleNumber.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleEqual = this.handleEqual.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n  }\n\n  handleClick(e) {\n    if (e.target.className == 'number') {\n      this.handleNumber(e)\n    }\n\n    if (e.target.className == 'decimal') {\n      this.handleDecimal(e)\n    }\n\n    if (e.target.className == 'operator') {\n      this.handleOperator(e)\n    }\n    if (e.target.className == 'clear') {\n      this.handleClear()\n    }\n\n    if (e.target.className == 'equals') {\n      this.handleEqual(e)\n    }\n  }\n\n  handleNumber(e) {\n    \n    if (this.state.expression == '0') {\n      if (e.target.textContent !== '0') {\n        this.setState({\n          expression: e.target.textContent\n        })\n      }\n    } else if (/[\\+\\-\\*\\/]$/.test(this.state.expression)) {\n      this.setState({\n        expression: this.state.expression + ' ' + e.target.textContent\n      })\n    } else {\n      this.setState({\n        expression: this.state.expression + e.target.textContent\n      })\n    }\n\n  }\n\n  handleDecimal(e) {\n    if (this.state.allowDecimal) {\n      this.setState({\n        expression: this.state.expression + e.target.textContent,\n        allowDecimal: false\n      })\n    }\n  }\n\n  handleOperator(e) {\n    let currOperator = e.target.textContent == 'x' ? '*' : e.target.textContent\n  \n      if (/([\\+\\-\\*\\/]\\s-)$/.test(this.state.expression)) {\n        this.setState({\n          expression: this.state.expression.replace(/([\\+\\-\\*\\/]\\s-)$/, currOperator)\n        })\n      } else {\n        if (currOperator == '-') {\n          this.setState({\n            expression: this.state.expression + ' ' + currOperator\n          })\n        } else {\n          if (/[\\+\\-\\*\\/]$/.test(this.state.expression)) {\n            this.setState({\n              expression: this.state.expression.slice(0, -1) + currOperator\n            })\n          } else {\n            this.setState({\n              expression: this.state.expression + ' ' + currOperator\n            })\n          }\n        }\n      }\n    \n\n    \n    this.setState({\n      allowDecimal: true\n    })\n  }\n\n  handleEqual(e) {\n    let result = eval(this.state.expression);\n\n    this.setState({\n      formula: this.state.expression + ' ' + '=' + ' ' + result,\n      expression: '' + result,\n      allowDecimal: true\n    })\n  }\n\n  handleClear() {\n    this.setState({\n      expression: '0',\n      formula:'',\n      allowDecimal: true\n    })\n  }\n\n  \n  render() {\n    return (\n      <div id = 'calculator'>\n        <Output formula = {this.state.formula} expression = {this.state.expression} />\n        <Smile />\n        <Numbers handleClick = {this.handleClick} />\n        <Operators handleClick = {this.handleClick} />\n        <Equals handleClick = {this.handleClick} />\n        <Decimal handleClick = {this.handleClick} />\n        <AC handleClick = {this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n","import React from 'react';\n\nconst numbers = [\n                    {number: 0, id: 'zero'},\n                    {number: 1, id: 'one'},\n                    {number: 2, id: 'two'},\n                    {number: 3, id: 'three'},\n                    {number: 4, id: 'four'},\n                    {number: 5, id: 'five'},\n                    {number: 6, id: 'six'},\n                    {number: 7, id: 'seven'},\n                    {number: 8, id: 'eight'},\n                    {number: 9, id: 'nine'}\n    \n                ];\n\nfunction Numbers(props) {\n    const Number = numbers.map((numberObj, i) => <div key = {i}\n                                                   onClick = {props.handleClick}\n                                                   className = 'number'\n                                                   id = {numberObj.id}\n                                                    \n                                                   >   \n                                                   {numberObj.number}\n                                            </div>)\n    return (\n        <div id = 'numbers'>\n           {Number} \n        </div>\n    );\n}\n\nexport default Numbers;","import React from 'react';\n\nconst operators = [\n                    {operator: '+', id: 'add'},\n                    {operator: '-', id: 'subtract'},\n                    {operator: 'x', id: 'multiply'},\n                    {operator: '/', id: 'divide'}\n                    \n                    ]\nfunction Operators(props) {\n\n    const Operators = operators\n                      .map((operatorObj, i) => \n                      <div key = {i}\n                           onClick = {props.handleClick}\n                           className = 'operator'\n                           id = {operatorObj.id}\n                           >\n                        {operatorObj.operator}\n                      </div>)\n    return (\n        <div id = 'operators'>\n            {Operators}\n        </div>\n    );\n}\n\nexport default Operators;","import React from 'react';\n\nfunction Equals(props) {\n    return (\n        <div id = 'equals' onClick = {props.handleClick} className = 'equals'>\n            =\n        </div>\n    );\n}\n\n\nexport default Equals;","import React from 'react';\n\nfunction Decimal(props) {\n    return (\n        <div id = 'decimal' onClick = {props.handleClick} className = 'decimal'>\n            .\n        </div>\n    );\n}\n\nexport default Decimal;","import React from 'react';\n\nfunction AC(props) {\n    return (\n        <div id = 'clear' onClick = {props.handleClick} className ='clear'>\n            AC\n        </div>\n    );\n}\n\nexport default AC;","import React from 'react';\n\nfunction Output(props) {\n    return (\n        <div id = 'output' className ='output'>\n            <div id = 'formula'>\n                {props.formula}\n            </div>\n            <div id = 'display'>\n                {props.expression}\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Output;","import React from 'react';\n\nfunction Smile(props) {\n    return (\n        <div id = 'smile'>\n            <i class=\"fa fa-smile-o\" aria-hidden=\"true\"></i>\n        </div>\n    );\n}\n\nexport default Smile;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}